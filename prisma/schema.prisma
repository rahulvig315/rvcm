datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String    @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.VarChar(500)
  access_token             String?   @db.VarChar(500)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  createdAt                DateTime? @default(now())
  oauth_token              String?
  oauth_token_secret       String?
  refresh_token_expires_in Int?
  updatedAt                DateTime?
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  password      String?
  role          String?   @default("user")
  updatedAt     DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id             String        @id @unique @default(uuid())
  fullName       String
  email          String        @unique
  bio            String
  image          String
  accountCreated DateTime      @default(now())
  accountName    String
  phone          String
  address        String
  transactions   Transaction[]
}

model Transaction {
  id                String             @id @unique @default(uuid())
  customerId        String
  creditCardDetails CreditCardDetails?
  productDetails    ProductDetails?
  customer          Customer           @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model CreditCardDetails {
  cvv           String
  issuer        String
  number        String      @unique
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model ProductDetails {
  price              String
  productName        String
  productAdjective   String
  productMaterial    String
  product            String
  department         String
  productDescription String
  transactionId      String      @unique
  transaction        Transaction @relation(fields: [transactionId], references: [id])
}
